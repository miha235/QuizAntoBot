from aiogram import types
import json


# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_questions():
    with open ( "questions.json","r",encoding = "utf-8" ) as file:
        return json.load ( file )


QUESTIONS = load_questions ()

current_question = {}  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
wrong_attempts = {}  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
awaiting_decision = {}  # –§–ª–∞–≥, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∞ "–µ—â–µ" –∏–ª–∏ "–æ—Ç–≤–µ—Ç"


async def start_game(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."""
    user_id = message.from_user.id
    current_question[user_id] = 0
    wrong_attempts[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    awaiting_decision[user_id] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
    await ask_question ( message,user_id )


async def ask_question(message: types.Message,user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
    if current_question[user_id] < len ( QUESTIONS ):
        question_text = QUESTIONS[current_question[user_id]]["question"]
        await message.answer ( question_text )
    else:
        await message.answer ( "üéâ üêú Ant‚Äôs tiny legs tremble, not from exhaustion, but from anticipation. The Tower of "
                               "Echoes fades behind him as he ascends the final path‚Äîroots twisting like ancient stories"
                               " beneath his feet. Moonlight bathes the branches, and there, high above, stretches the "
                               "Fig Tree of Destiny, its leaves shimmering like emerald stars. \n\nPerched on a branch, "
                               "waiting with a smile brighter than the morning sun, is his beloved princess‚Äîthe caterpillar "
                               "he longed for throughout his journey. Her eyes glisten with joy as Ant reaches her, the "
                               "weight of trials falling away like dew at dawn.\n\nüéâ Congratulations, brave traveler! "
                               "You‚Äôve faced whispers, shadows, and timeless questions. You‚Äôve carried the weight of "
                               "words and the burden of choice. And now‚Äîyou‚Äôve made it.\n\nüåø But wait... there‚Äôs more! "
                               "Every true hero deserves a reward. Your journey has unlocked a special gift, crafted just "
                               "for you: \n\nüéÅ Click here to receive your gift! \n"
                               "https://drive.google.com/drive/folders/1rE-rv89GjlrEzPNEmedRrvC6wlcHAT1I?usp=drive_link\n"
                               " \n\nThe princess giggles, her voice "
                               "like wind chimes swaying gently.\"You didn‚Äôt just walk a path,\" she says, \"you carved "
                               "one. And sometimes, the greatest treasures are not in the places you reach, but in the "
                               "journey that carries you there.\"\n\nüêú Ant smiles, resting at last beneath the fig leaves, "
                               "the stars above whispering... \n\n\"Every ending holds the promise of a new beginning.\"")
        del current_question[user_id]
        del wrong_attempts[user_id]
        del awaiting_decision[user_id]


async def check_answer(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ "–µ—â–µ" –∏–ª–∏ "–æ—Ç–≤–µ—Ç", –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if awaiting_decision.get ( user_id,False ):
        await handle_retry_or_answer ( message )
        return

    if user_id in current_question:
        index = current_question[user_id]
        correct_answer = QUESTIONS[index]["answer"]

        if message.text.strip ().lower () == correct_answer.lower ():
            await message.answer ( "\n\nüòä –î–æ–±—Ä–æ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! Welldone!" )
            current_question[user_id] += 1
            wrong_attempts[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            awaiting_decision[user_id] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            await ask_question ( message,user_id )
        else:
            wrong_attempts[user_id] += 1

            if wrong_attempts[user_id] == 5:
                hint = QUESTIONS[index]["hint"]
                await message.answer ( f"ü§î Hint: {hint}" )

            elif wrong_attempts[user_id] >= 10:
                awaiting_decision[user_id] = True  # –¢–µ–ø–µ—Ä—å –±–æ—Ç –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await message.answer (
                    "\n‚ùó–ü–µ—Ä–¥–∏–Ω–¥–µ—Ä–∏–Ω–¥–∏–Ω–∞!‚ùó\n\nDo you want to keep suffering, or do you want me to show you the right answer? "
                    "(Choose 'suffering' or 'answer')" )

            else:
                await message.answer ( f"‚ùå –ï–ª–∫–∏-–ü–∞–ª–∫–∏! Try again! (Attempts: {wrong_attempts[user_id]}/10)" )


async def handle_retry_or_answer(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫."""
    user_id = message.from_user.id

    if user_id in current_question:
        index = current_question[user_id]
        correct_answer = QUESTIONS[index]["answer"]

        if message.text.strip ().lower () == "suffering":
            awaiting_decision[user_id] = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            await message.answer ( "üí™ Try again!" )

        elif message.text.strip ().lower () == "answer":
            await message.answer ( f"‚úÖ The key: {correct_answer}" )
            current_question[user_id] += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            wrong_attempts[user_id] = 0  # –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫
            awaiting_decision[user_id] = False  # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            await ask_question ( message,user_id )

        else:
            await message.answer ( "‚ùó Please, write 'suffering' or 'answer'." )
